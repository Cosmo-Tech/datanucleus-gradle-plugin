sourceSets {
    functionalTest {
        java.srcDir file('src/functionalTest/java')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    functionalTestCompile.extendsFrom testImplementation
    functionalTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task functionalTest(type: Test) {
    jacoco {
        append = true
        destinationFile = file("$buildDir/jacoco/test.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test, integrationTest
}

check.dependsOn functionalTest

// tag::source-set-config[]
gradlePlugin {
    testSourceSets sourceSets.functionalTest
}
// end::source-set-config[]
